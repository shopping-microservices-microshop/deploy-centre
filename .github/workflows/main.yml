# This GitHub Actions workflow automates the creation of a complete
# Kubernetes and GitOps environment on an AWS EC2 instance.
#
# It uses Terraform to provision the infrastructure and then executes
# a series of scripts to configure everything from the runner to Argo CD
# and the monitoring stack.

name: Create GitOps Environment

# Allow this workflow to be triggered manually from the Actions tab in GitHub
on:
  workflow_dispatch:

jobs:
  provision-and-setup:
    name: Provision and Setup Environment
    # This now runs on your self-hosted runner, which needs Node.js installed.
    runs-on: self-hosted

    steps:
      # Step 1: Check out the repository
      # This makes all your scripts and Terraform files available to the workflow.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Install Node.js on the runner
      # This is required for the 'configure-aws-credentials' action to run.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent Long-Term Support (LTS) version

      # Step 3: Configure AWS Credentials
      # This action securely configures the AWS CLI with your secrets,
      # which Terraform will use to authenticate with your AWS account.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Or your preferred region

      # Step 4: Setup Terraform
      # This action installs a specific version of the Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0 # Or a newer version

      # Step 5: Run Terraform to Provision the EC2 Instance
      # This is the core step. It now includes a cleanup command.
      - name: Apply Terraform Configuration
        id: terraform
        working-directory: ./infra # Run commands from the 'infra' subdirectory
        run: |
          # ✅ NEW STEP: Clean up previous Terraform artifacts to ensure a fresh start
          echo "Cleaning up previous Terraform run artifacts..."
          rm -rf .terraform*
          rm -f terraform.tfstate*

          # Now, initialize and apply with a clean slate
          terraform init
          terraform apply -auto-approve \
            -var="runner_token=${{ secrets.RUNNER_TOKEN }}" \
            -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var="ssh_key_name=your_key_pair_name" # IMPORTANT: Replace with your actual EC2 key pair name

      # Step 6: Output the public IP of the new instance
      # This makes it easy to find and connect to your new server.
      - name: Display New Instance IP
        run: |
          echo "✅ Environment setup has been initiated on the new EC2 instance."
          echo "To monitor the setup process, SSH into the machine and run:"
          echo "tail -f /var/log/cloud-init-output.log"

