name: Provision + Run master-setup (Option 2)

on:
  workflow_dispatch:

jobs:
  provision-and-remote-setup:
    runs-on: ubuntu-latest
    env:
      TF_WORKDIR: ./infra

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      # ðŸ”‘ Generate a fresh org runner token
      - name: Generate runner token
        id: runner-token
        run: |
          TOKEN=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/orgs/shopping-microservices-microshop/actions/runners/registration-token \
            | jq -r .token)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Terraform Init & Apply
        working-directory: ${{ env.TF_WORKDIR }}
        run: |
          terraform init -migrate-state || terraform init
          terraform apply -auto-approve \
            -var="runner_token=${{ steps.runner-token.outputs.token }}" \
            -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Get EC2 public IP
        id: get-ip
        working-directory: ${{ env.TF_WORKDIR }}
        run: |
          PUBLIC_IP=$(terraform output -raw public_ip | head -n 1)
          echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Wait for SSH
        run: |
          HOST="${{ env.EC2_PUBLIC_IP }}"
          for i in {1..30}; do
            ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i ~/.ssh/deploy_key ubuntu@"$HOST" "echo ok" >/dev/null 2>&1 && break
            echo "Waiting for SSH... attempt $i"
            sleep 10
          done

      - name: Run master-setup.sh remotely
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key ubuntu@${{ env.EC2_PUBLIC_IP }} "
            set -eux
            
            export RUNNER_TOKEN='${{ steps.runner-token.outputs.token }}'
            export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'
            export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            
            echo '--- Cloning deployment repository ---'
            if [ ! -d /home/ubuntu/deploy-centre ]; then
              git clone https://github.com/shopping-microservices-microshop/deploy-centre.git /home/ubuntu/deploy-centre
              chown -R ubuntu:ubuntu /home/ubuntu/deploy-centre
            fi
            
            cd /home/ubuntu/deploy-centre
            chmod +x *.sh
            
            echo '--- Executing master-setup.sh ---'
            sudo -E -u ubuntu ./master-setup.sh \"\$RUNNER_TOKEN\" \"\$AWS_ACCESS_KEY_ID\" \"\$AWS_SECRET_ACCESS_KEY\"
          "

      - name: Post-setup info
        run: |
          echo "âœ… master-setup.sh has been triggered on the EC2 instance."
          echo "SSH into the instance:"
          echo "  ssh -i <your-key.pem> ubuntu@${{ env.EC2_PUBLIC_IP }}"
          echo "Check logs on the instance:"
          echo "  sudo tail -f /var/log/cloud-init-output.log"
          echo "  ls -la /home/ubuntu/deploy-centre"
